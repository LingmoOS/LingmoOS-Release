/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -c DBusMenuInterface -i src/libdbusmenuqt/dbusmenutypes_p.h -p dbusmenu_interface /home/reion/Cute/statusbar/src/libdbusmenuqt/com.canonical.dbusmenu.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSMENU_INTERFACE_H
#define DBUSMENU_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "src/libdbusmenuqt/dbusmenutypes_p.h"

/*
 * Proxy class for interface com.canonical.dbusmenu
 */
class DBusMenuInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.canonical.dbusmenu"; }

public:
    DBusMenuInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~DBusMenuInterface();

    Q_PROPERTY(QString Status READ status)
    inline QString status() const
    { return qvariant_cast< QString >(property("Status")); }

    Q_PROPERTY(uint Version READ version)
    inline uint version() const
    { return qvariant_cast< uint >(property("Version")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> AboutToShow(int id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("AboutToShow"), argumentList);
    }

    inline Q_NOREPLY void Event(int id, const QString &eventId, const QDBusVariant &data, uint timestamp)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(eventId) << QVariant::fromValue(data) << QVariant::fromValue(timestamp);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("Event"), argumentList);
    }

    inline QDBusPendingReply<DBusMenuItemList> GetGroupProperties(const QList<int> &ids, const QStringList &propertyNames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ids) << QVariant::fromValue(propertyNames);
        return asyncCallWithArgumentList(QStringLiteral("GetGroupProperties"), argumentList);
    }

    inline QDBusPendingReply<uint, DBusMenuLayoutItem> GetLayout(int parentId, int recursionDepth, const QStringList &propertyNames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(parentId) << QVariant::fromValue(recursionDepth) << QVariant::fromValue(propertyNames);
        return asyncCallWithArgumentList(QStringLiteral("GetLayout"), argumentList);
    }
    inline QDBusReply<uint> GetLayout(int parentId, int recursionDepth, const QStringList &propertyNames, DBusMenuLayoutItem &item)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(parentId) << QVariant::fromValue(recursionDepth) << QVariant::fromValue(propertyNames);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetLayout"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            item = qdbus_cast<DBusMenuLayoutItem>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QDBusVariant> GetProperty(int id, const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QStringLiteral("GetProperty"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ItemActivationRequested(int id, uint timeStamp);
    void ItemsPropertiesUpdated(DBusMenuItemList in0, DBusMenuItemKeysList in1);
    void LayoutUpdated(uint revision, int parentId);
};

#endif
